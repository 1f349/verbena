// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: records.sql

package database

import (
	"context"

	"github.com/gobuffalo/nulls"
)

const commitZoneRecords = `-- name: CommitZoneRecords :execrows
UPDATE records
SET ttl    = pre_ttl,
    value  = pre_value,
    active = pre_active
WHERE zone_id = ?
  AND (
    ttl != pre_ttl
        OR (ttl IS NULL) != (pre_ttl IS NULL)
        OR (` + "`" + `value` + "`" + ` != pre_value)
        OR (active != pre_active)
    )
`

func (q *Queries) CommitZoneRecords(ctx context.Context, zoneID int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, commitZoneRecords, zoneID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteRecordFromApi = `-- name: DeleteRecordFromApi :exec
UPDATE records
SET pre_delete = TRUE
WHERE id = ?
  AND zone_id = ?
`

type DeleteRecordFromApiParams struct {
	RecordID int64 `json:"record_id"`
	ZoneID   int64 `json:"zone_id"`
}

func (q *Queries) DeleteRecordFromApi(ctx context.Context, arg DeleteRecordFromApiParams) error {
	_, err := q.db.ExecContext(ctx, deleteRecordFromApi, arg.RecordID, arg.ZoneID)
	return err
}

const getZoneActiveRecords = `-- name: GetZoneActiveRecords :many
SELECT id, name, zone_id, ttl, type, value, active, pre_ttl, pre_value, pre_active, pre_delete
FROM records
WHERE active = 1
  AND zone_id = ?
`

func (q *Queries) GetZoneActiveRecords(ctx context.Context, zoneID int64) ([]Record, error) {
	rows, err := q.db.QueryContext(ctx, getZoneActiveRecords, zoneID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ZoneID,
			&i.Ttl,
			&i.Type,
			&i.Value,
			&i.Active,
			&i.PreTtl,
			&i.PreValue,
			&i.PreActive,
			&i.PreDelete,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getZoneRecord = `-- name: GetZoneRecord :one
SELECT records.id, records.name, records.zone_id, records.ttl, records.type, records.value, records.active, records.pre_ttl, records.pre_value, records.pre_active, records.pre_delete, zones.name
FROM records
         INNER JOIN zones ON records.zone_id = zones.id
WHERE records.id = ?
  AND zones.id = ?
`

type GetZoneRecordParams struct {
	RecordID int64 `json:"record_id"`
	ZoneID   int64 `json:"zone_id"`
}

type GetZoneRecordRow struct {
	Record Record `json:"record"`
	Name   string `json:"name"`
}

func (q *Queries) GetZoneRecord(ctx context.Context, arg GetZoneRecordParams) (GetZoneRecordRow, error) {
	row := q.db.QueryRowContext(ctx, getZoneRecord, arg.RecordID, arg.ZoneID)
	var i GetZoneRecordRow
	err := row.Scan(
		&i.Record.ID,
		&i.Record.Name,
		&i.Record.ZoneID,
		&i.Record.Ttl,
		&i.Record.Type,
		&i.Record.Value,
		&i.Record.Active,
		&i.Record.PreTtl,
		&i.Record.PreValue,
		&i.Record.PreActive,
		&i.Record.PreDelete,
		&i.Name,
	)
	return i, err
}

const getZoneRecords = `-- name: GetZoneRecords :many
SELECT records.id, records.name, records.zone_id, records.ttl, records.type, records.value, records.active, records.pre_ttl, records.pre_value, records.pre_active, records.pre_delete, zones.name
FROM records
         INNER JOIN zones ON records.zone_id = zones.id
WHERE zone_id = ?
`

type GetZoneRecordsRow struct {
	Record Record `json:"record"`
	Name   string `json:"name"`
}

func (q *Queries) GetZoneRecords(ctx context.Context, zoneID int64) ([]GetZoneRecordsRow, error) {
	rows, err := q.db.QueryContext(ctx, getZoneRecords, zoneID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetZoneRecordsRow
	for rows.Next() {
		var i GetZoneRecordsRow
		if err := rows.Scan(
			&i.Record.ID,
			&i.Record.Name,
			&i.Record.ZoneID,
			&i.Record.Ttl,
			&i.Record.Type,
			&i.Record.Value,
			&i.Record.Active,
			&i.Record.PreTtl,
			&i.Record.PreValue,
			&i.Record.PreActive,
			&i.Record.PreDelete,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRecordFromApi = `-- name: InsertRecordFromApi :execlastid
INSERT INTO records (name, zone_id, ttl, type, value, active, pre_ttl, pre_value, pre_active, pre_delete)
VALUES (?, ?, 0, ?, "", 0, ?, ?, ?, 0)
`

type InsertRecordFromApiParams struct {
	Name      string      `json:"name"`
	ZoneID    int64       `json:"zone_id"`
	Type      string      `json:"type"`
	PreTtl    nulls.Int32 `json:"pre_ttl"`
	PreValue  string      `json:"pre_value"`
	PreActive bool        `json:"pre_active"`
}

func (q *Queries) InsertRecordFromApi(ctx context.Context, arg InsertRecordFromApiParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertRecordFromApi,
		arg.Name,
		arg.ZoneID,
		arg.Type,
		arg.PreTtl,
		arg.PreValue,
		arg.PreActive,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateRecordFromApi = `-- name: UpdateRecordFromApi :exec
UPDATE records
SET pre_ttl    = ?,
    pre_value  = ?,
    pre_active = ?
WHERE id = ?
  AND zone_id = ?
`

type UpdateRecordFromApiParams struct {
	PreTtl    nulls.Int32 `json:"pre_ttl"`
	PreValue  string      `json:"pre_value"`
	PreActive bool        `json:"pre_active"`
	ID        int64       `json:"id"`
	ZoneID    int64       `json:"zone_id"`
}

func (q *Queries) UpdateRecordFromApi(ctx context.Context, arg UpdateRecordFromApiParams) error {
	_, err := q.db.ExecContext(ctx, updateRecordFromApi,
		arg.PreTtl,
		arg.PreValue,
		arg.PreActive,
		arg.ID,
		arg.ZoneID,
	)
	return err
}
