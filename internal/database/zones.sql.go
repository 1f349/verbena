// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: zones.sql

package database

import (
	"context"
)

const getActiveZones = `-- name: GetActiveZones :many
SELECT id, name, serial, admin, refresh, retry, expire, ttl, active
FROM zones
WHERE active = 1
`

func (q *Queries) GetActiveZones(ctx context.Context) ([]Zone, error) {
	rows, err := q.db.QueryContext(ctx, getActiveZones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Zone
	for rows.Next() {
		var i Zone
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Serial,
			&i.Admin,
			&i.Refresh,
			&i.Retry,
			&i.Expire,
			&i.Ttl,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnedZones = `-- name: GetOwnedZones :many
SELECT zones.id, zones.name, zones.serial, zones.admin, zones.refresh, zones.retry, zones.expire, zones.ttl, zones.active, owners.user_id
FROM zones
         INNER JOIN owners ON zones.id = owners.zone_id
WHERE owners.user_id = ?
`

type GetOwnedZonesRow struct {
	Zone   Zone   `json:"zone"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetOwnedZones(ctx context.Context, userID string) ([]GetOwnedZonesRow, error) {
	rows, err := q.db.QueryContext(ctx, getOwnedZones, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOwnedZonesRow
	for rows.Next() {
		var i GetOwnedZonesRow
		if err := rows.Scan(
			&i.Zone.ID,
			&i.Zone.Name,
			&i.Zone.Serial,
			&i.Zone.Admin,
			&i.Zone.Refresh,
			&i.Zone.Retry,
			&i.Zone.Expire,
			&i.Zone.Ttl,
			&i.Zone.Active,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getZone = `-- name: GetZone :one
SELECT id, name, serial, admin, refresh, retry, expire, ttl, active
FROM zones
WHERE id = ?
`

func (q *Queries) GetZone(ctx context.Context, id int64) (Zone, error) {
	row := q.db.QueryRowContext(ctx, getZone, id)
	var i Zone
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Serial,
		&i.Admin,
		&i.Refresh,
		&i.Retry,
		&i.Expire,
		&i.Ttl,
		&i.Active,
	)
	return i, err
}

const updateZoneSerial = `-- name: UpdateZoneSerial :exec
UPDATE zones
SET serial =
        IF(LEFT(serial, 8) = DATE_FORMAT(CURDATE(), '%Y%m%d'), serial + 1,
           CAST(DATE_FORMAT(CURDATE(), '%Y%m%d') AS UNSIGNED) * 100 + 1)
WHERE id = ?
`

func (q *Queries) UpdateZoneSerial(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateZoneSerial, id)
	return err
}
