// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: owners.sql

package database

import (
	"context"
)

const getOwnerByUserIdAndZone = `-- name: GetOwnerByUserIdAndZone :one
SELECT owners.id, zone_id, user_id, zones.id, name, serial, admin, refresh, retry, expire, ttl, active
FROM owners
         INNER JOIN zones ON owners.zone_id = zones.id
WHERE user_id = ?
  AND zones.name = ?
`

type GetOwnerByUserIdAndZoneParams struct {
	UserID string `json:"user_id"`
	Name   string `json:"name"`
}

type GetOwnerByUserIdAndZoneRow struct {
	ID      int64  `json:"id"`
	ZoneID  int64  `json:"zone_id"`
	UserID  string `json:"user_id"`
	ID_2    int64  `json:"id_2"`
	Name    string `json:"name"`
	Serial  int64  `json:"serial"`
	Admin   string `json:"admin"`
	Refresh int32  `json:"refresh"`
	Retry   int32  `json:"retry"`
	Expire  int32  `json:"expire"`
	Ttl     int32  `json:"ttl"`
	Active  bool   `json:"active"`
}

func (q *Queries) GetOwnerByUserIdAndZone(ctx context.Context, arg GetOwnerByUserIdAndZoneParams) (GetOwnerByUserIdAndZoneRow, error) {
	row := q.db.QueryRowContext(ctx, getOwnerByUserIdAndZone, arg.UserID, arg.Name)
	var i GetOwnerByUserIdAndZoneRow
	err := row.Scan(
		&i.ID,
		&i.ZoneID,
		&i.UserID,
		&i.ID_2,
		&i.Name,
		&i.Serial,
		&i.Admin,
		&i.Refresh,
		&i.Retry,
		&i.Expire,
		&i.Ttl,
		&i.Active,
	)
	return i, err
}
