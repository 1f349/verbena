// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: owners.sql

package database

import (
	"context"
)

const getOwnerByUserIdAndZone = `-- name: GetOwnerByUserIdAndZone :one
SELECT owners.id, owners.zone_id, owners.user_id, zones.id, zones.name, zones.serial, zones.admin, zones.refresh, zones.retry, zones.expire, zones.ttl, zones.active
FROM owners
         INNER JOIN zones ON owners.zone_id = zones.id
WHERE user_id = ?
  AND zones.name = ?
`

type GetOwnerByUserIdAndZoneParams struct {
	UserID string `json:"user_id"`
	Name   string `json:"name"`
}

type GetOwnerByUserIdAndZoneRow struct {
	Owner Owner `json:"owner"`
	Zone  Zone  `json:"zone"`
}

func (q *Queries) GetOwnerByUserIdAndZone(ctx context.Context, arg GetOwnerByUserIdAndZoneParams) (GetOwnerByUserIdAndZoneRow, error) {
	row := q.db.QueryRowContext(ctx, getOwnerByUserIdAndZone, arg.UserID, arg.Name)
	var i GetOwnerByUserIdAndZoneRow
	err := row.Scan(
		&i.Owner.ID,
		&i.Owner.ZoneID,
		&i.Owner.UserID,
		&i.Zone.ID,
		&i.Zone.Name,
		&i.Zone.Serial,
		&i.Zone.Admin,
		&i.Zone.Refresh,
		&i.Zone.Retry,
		&i.Zone.Expire,
		&i.Zone.Ttl,
		&i.Zone.Active,
	)
	return i, err
}
